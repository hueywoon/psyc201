[["index.html", "PSYC201 R Companion Website About This Website", " PSYC201 R Companion Website William TOV &amp; Huey Woon LEE 2024-03-02 About This Website This is the R companion website for Prof. William Tov’s PSYC201 class. Note. Students who have taken PSYC208 under Prof. Huey Woon Lee would already have seen parts of this in the PSYC208 R companion website. If so, then you may skip the getting started and basics sections. :) "],["start.html", "1 Getting Started 1.1 Install R and RStudio 1.2 The RStudio Interface 1.3 R Script 1.4 Some Tips and Tricks", " 1 Getting Started To analyse data in R, you need both R and RStudio. These are different programmes. Think of R as the software that executes our commands and RStudio as the interface between us and R that makes interacting with R a much more pleasant experience. If that doesn’t make sense, here’s a (hopefully relatable) example. Imagine you went to a hawker centre and there’s an uncle manning the store. This uncle can only speak Hokkien but you can’t. So, you tell your friend, who can speak Hokkien, what you want. Then, your friend translates that for the uncle, who then serves up a delicious meal for you. Think of the uncle in this example as R and your friend as RStudio. While you can try to “converse” with R directly, it’s much easier to do so through RStudio. So… For the sake of your sanity, please do download both programmes! 1.1 Install R and RStudio Install R For Windows Open an internet browser and go to https://cloud.r-project.org/. Under Download and Install R, Click on Download R for Windows. Click on base. Download the latest release by saving the .exe file on your computer. Double-click the file and follow the installation instructions. For macOS Open an internet browser and go to https://cloud.r-project.org/. Under Download and Install R, click on Download R for macOS. Download the latest release by saving the .pkg file to your computer. Double-click the file and follow the installation instructions. Install RStudio Now that R is installed, download and install RStudio. Go to https://www.rstudio.com/products/rstudio/download/. Click Download under RStudio Desktop. Click on the version recommended for your system, or the latest Windows / macOS version, and save the file. Double-click the file and follow the installation instructions. 1.2 The RStudio Interface Now, start up RStudio. You should see something like this: Figure 1.1: R Studio Interface With Three Panes When you first start up RStudio, you will see three panes: the R console, the workspace, and the files, plots, packages, help, and viewer pane. Each pane serves different purposes. R console: The R console is where commands are submitted to R for R to execute. It is also where we find some of the output from R (e.g., analysis results). Workspace: I think of this as R’s short-term memory. There are two tabs that are particularly useful. Environment tab: We can find the list of objects (e.g., variables, data frames, functions) that we created in the session here. History tab: Here is where we can find all the previous commands we submitted to R in the session. Files, plots, packages, help, and viewer: Files: We can create new folders on our computer, move, delete, and rename files here. Plots: We can find all the plots we instructed R to produce during the session here. Packages: We can find, install, and update packages here. Packages contain data, functions, help menus, etc. that other people have created to supplement those in R. We will talk more about specific packages later. Help: We can find information about a given command or package. We can also find more information about various commands and the packages on this website: https://www.rdocumentation.org/ Note. Because the Terminal tab, the Connections tab, and the Viewer tab will not be used in this course, we will not talk about them. 1.3 R Script To get R to do stuff (e.g., conduct analyses), we submit commands to R through RStudio. Although we can type the commands directly into the console, R users prefer to type the commands into what is called the script editor because we can save the commands in the script editor into script files (with the extension .R). The script files allow us to keep long-term records of the analyses that we have conducted. We can also share the script files with other R users so that they can reproduce our analyses. (We will use the words command and code interchangeably here.) To open a blank R script, go to File &gt; New File &gt; R Script. Or, you can use the shortcut Ctrl + Shift + N (Windows) or Cmd + Shift + N (macOS). Notice that now, your RStudio has four panes. The script editor should now take up the top half of the left hand side of the screen as shown below. Figure 1.2: R Studio With Four Panes 1.4 Some Tips and Tricks Before we start coding proper, here are some tips to help you along your R journey! 1.4.1 Softwrap Long Lines Sometimes, we might write commands in the Script editor section that are too long (horizontally) to fit the window. To see the entire command, we might need to scroll left and right. This can be frustrating. (It’s like Notepad, without word wrap.) Fortunately, we can wrap the text such that the code fits into the size of the window. Go to Code &gt; Soft Wrap Long Lines. 1.4.2 Make Notes or Comments In R (and most programming languages), you can write notes or comments in the script to yourself and your readers. This is done in R by starting the line with a # sign. # This is a comment. Please make liberal use of comments. They will help you understand what you’re doing and why, especially if you haven’t visited a project in a while. 1.4.3 Multi-Line Comments To make your super long comments readable, you may break them into several lines, starting each line with #&gt;. #&gt; This is a comment #&gt; that has been broken #&gt; into multiple #&gt; lines. #&gt; :) 1.4.4 Setting working directory Typically when we analyse data, we need to reference external files (e.g., our data files). To tell R where to look for those data files, we need to specify the full file path (i.e., the file location). While this is fine if you only have one or two things to reference, it can be kind of tedious to keep typing the file path if you have many things to reference. Furthermore, if you choose to change your file location, it would be quite a hassle (and also error-prone) to have to update all those file paths in the script. What we can do instead is to set a working directory in R using the function setwd(). This tells R where your data files are stored for the session, so it will know to look there. It will also be the place that R saves any output (e.g., plots). To get the file location in Windows, we first go to the folder where the file is located, right-click on the address bar, and click Copy address as text. We then need to convert the backslashes in the file path to forward slashes before we can use it. Let’s say the file path is C:\\Users\\Win10\\Desktop\\R. After converting all the backslashes to forward slashes, the file path to use is C:/Users/Win10/Desktop/R. In macOS, there are several ways to get the file path. For instructions, please visit this website: https://www.dev2qa.com/how-to-get-file-path-in-mac/. Note that the file paths in macOS already use forward slashes, so changing backslashes to forward slashes is not an issue for macOS users. After getting the file path, you can then set the working directory as follows, with the file path encased in open/close inverted commas, within the parentheses. # Set working directory setwd(&quot;C:/Users/Win10/Desktop/R&quot;) 1.4.5 Using R Projects While setting the working directory manually is sufficient when we have one or two projects, many of us have multiple projects on-going at the same time. If we have a bunch of different files from different projects all strewn in a single directory (folder), it can get quite messy. To stay organised, it is best that we create an R project for each project we are working on. To do this, go to File &gt; New Project. A dialogue window with three options, “New Directory”, “Existing Directory” and “Version Control”, will appear. From here, you may choose either “New Directory” or “Existing Directory”. If you chose “New Directory”, R will create a new folder and create an R project within that new folder. If you chose “Existing Directory”, R will create an R project within an existing folder that you specify. Either will work, but I usually select “Existing Directory” as I would already have created my own folder to house materials related to a specific project. After RStudio has created the project, it will change the working directory to the project directory so that you can access all the files (e.g., data, script) related to this project in this directory. RStudio will also create a file with the extension .Rproj in the project directory. When you open this file, RStudio will automatically start a new session with the project directory as your working directory. While it is not absolutely necessary to use RStudio projects in this course, I recommend it because it will help keep you organized. 1.4.6 Debugging When you are programming, you will make errors (“bugs”) in your code. Trying to figure out where you made the error (“debugging”) can be extremely time-consuming and frustrating. To help you along, here are some of the most common bugs that you’ll run into. Misspelled object or function Misspelled object (e.g., condition vs condtion) will throw this error message: Error: object not found Misspelled function (e.g., t.test vs ttest) or trying to use functions in packages that have not been loaded yet will throw this error message: Error: could not find function R is case-sensitive. So if your object is called Dataset, you need to type Dataset and not dataset, else it will throw an error message. If you’re referring to a variable in the dataset, you must attach the $ sign (e.g., dataset$variable). Otherwise, R will tell you it cannot find the object. Punctuation mistake Remember to close the parenthesis () Don’t add a space where there shouldn’t be. For example, if your object is called dataset, don’t type data set. Use the correct punctuation for the function. For example, if the function requires a comma, don’t put in full stops. If it requires a double equal sign, don’t put in a single equal sign. If you’ve tried all the above and still can’t figure out what’s going on, just copy and paste the warning into the search engine. 99% of the time, you’ll be able to figure out what happened by reading responses on forums or other websites. (Programmers are super helpful!) 1.4.7 Last Words In general, students new to programming tend to be hesitant to experiment, worried that they’d break the software or something. Please be assured that this rarely happens (except maybe when you write a loop function that doesn’t stop looping!). So just have fun and experiment. If RStudio freezes, just close it and re-start! Congrats! You’ve now installed R and RStudio! You’re now ready to move on to some basics! =D "],["basics.html", "2 Basics 2.1 Some Basic Commands 2.2 Typing and Executing Commands 2.3 Entering Data Directly Into R", " 2 Basics 2.1 Some Basic Commands Before typing commands into the script editor, it might be useful for you to know some of the following basic commands. To place a comment in the script file, begin the line with #. To run (execute) a line in the script file, place the cursor on the line, hit Ctrl/Cmd + Enter. If we typed the command directly into the console, we only need to hit Enter To run multiple lines in the script file, select the lines, hit Ctrl/Cmd + Enter. To run all lines in the script file, hit Ctrl + Shift + Enter To clear the console when it becomes too messy, hit Ctrl/Cmd + L. To request help, type a question mark in front of the command or the package name (e.g., ?cor). Information about the command will appear in the Help tab (lower right pane). 2.2 Typing and Executing Commands Now, let’s actually get R to do stuff for us! Open a script file (Ctrl/CMD + Shift + N). Then copy and paste the following R codes into the script file. Run each line (Ctrl/Cmd + Enter) to see what they do. Note that # denotes a comment, and therefore it will run as a line of text. Experiment and have fun! # Assign a single value (e.g., 9) to an object, say x. x &lt;- 9 # this means &quot;x gets the value of 9&quot;. # Get the value for x. x # remember that R is case-sensitive. If you typed X, you&#39;ll get an error message. X # see how R complains here that it can&#39;t find the object? # If you want to know what objects are in the workspace (i.e., R&#39;s &quot;short term&quot; memory), look at the Environment tab or type ls(). ls() # You may remove an object (e.g., x) from the workspace using rm(), where rm stands for remove. rm(x) # If there are too many objects in the workspace, you may remove all objects from the workspace using rm(list=ls()). To remember this command, I think of it as telling R to remove the list of objects in the Environment tab. rm(list = ls()) # Assign a non-numerical value by putting the value in quotation marks. y &lt;- &quot;hello!&quot; # Get the value of y. Notice the value of y is in quotation marks, indicating it is a non-numerical value. y # Perform the following mathematical operations in R. 11 + 10 11 - 10 11 * 10 11 / 10 11 ^ 10 11 ^ (1/2) sqrt(11) # this number should be the same as above line log(11) # taking natural log (log base e also known as ln) log10(11) # taking log base 10 exp(11) # taking the exponential # Perform mathematical operations in R with an object (e.g., a). a &lt;- 11 # a gets the value of 11 a + 10 a - 10 a * 10 a / 10 a ^ (1/2) sqrt(a) log(a) log10(a) exp(a) # Perform mathematical operations with more than one object. y &lt;- 2 # notice that 2 now replaces the value “hello”. a + y a - y a * y a / y a ^ (1/y) # You cannot perform mathematical operations with non-numerical objects. b &lt;- &quot;1&quot; # recall, putting things in between quotation marks makes it non-numerical, even if 1 is a number. a + b # you get an error here because you cannot perform mathematical operations with non-numerical objects. # An object can store more than one value, such as a set of numbers or a set of characters. This is known as a vector and can be created using c(). num_vector &lt;- c(1, 2, 3, 4, 5) # numeric vector fruits &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;) # non-numeric vector # Get the values stored in the vectors num_vector fruits # You can do mathematical operations with numerical vectors but not with non-numerical vectors. num_vector * 5 # each value in num_vector is multiplied by 5 fruits * 5 # this throws an error that tells you that you cannot use non-numeric values for this operation 2.3 Entering Data Directly Into R In reality, we rarely use R to do such simple mathematical calculations; we use R for data analyses. But before we can conduct any analysis, we need to give R some data. One way is to key the data directly into R. Let’s say we have three people, Bob, Andrea, and Calvin. We have their ages, the number of children each of them has, and their gender. Name Age No. of Children Gender Bob 48 1 Male Andrea 47 3 Female Calvin 49 2 Male Let’s figure out how to give R this set of data. First, we create an object name, and assign the three people’s names to it. name &lt;- c(&quot;Bob&quot;, &quot;Andrea&quot;, &quot;Calvin&quot;) # the c in c() stands for combine # here, we&#39;re telling R to combine the three names into a list of names # notice the names are between quotation marks # this tells R that name is a string (non-numerical) variable If we type name into the console, we should get: ## [1] &quot;Bob&quot; &quot;Andrea&quot; &quot;Calvin&quot; Next, we create the object age, with the three people’s ages. age &lt;- c(48, 47, 49) # here, we&#39;re creating a list of ages # the order of age should match the order of the names If we type age into the console, we should get: ## [1] 48 47 49 Now, let’s combine the two variables into a data frame. You can think of a data frame as a spreadsheet or as a table, where each row represents the information for one person, and name and age are in side-by-side columns. We will use the data.frame() function and call this data frame data. data &lt;- data.frame(Name = name, Age = age) # Name = name tells R that the column should have the header Name and the data for the column should be copied from the object name. # Age = age tells R that the column should have the header Age and the data for the column should be copied from the object age. Type data into the console. You should see: ## Name Age ## 1 Bob 48 ## 2 Andrea 47 ## 3 Calvin 49 Notice that the output has two columns: Name and Age, where Name lists the names of the individuals and Age lists their ages. The values of Name and Age in the data frame were copied from the original objects. This means that the original objects, name and age, are still in R’s memory. You can see that this is the case from the Environment tab or when you use the ls() function. ## [1] &quot;age&quot; &quot;data&quot; &quot;name&quot; Let’s remove the original variables name and age. rm(name) rm(age) Now, when you type ls() into the console, you’ll see that all is left is the data frame, data. ## [1] &quot;data&quot; If you wish, you can directly type the data into a data frame instead of first creating separate objects for each variable. data2 &lt;- data.frame(Name = c(&quot;Bob&quot;, &quot;Andrea&quot;, &quot;Calvin&quot;), Age = c(48, 47, 49)) # data and data2 will look exactly the same Now, suppose we want to use the variables in the data frame data. We will need to attach data$ (a dollar sign after the name of the data frame) before the variable name. This will tell R that that variable comes from the data frame data. For example, if we want to know the ages of the three participants. We should type: data$Age ## [1] 48 47 49 # this tells R to go to the object called data, locate the column Age and then produce the values in that column # remember that R is case-sensitive. So if you&#39;d typed data$age, you&#39;ll get an error. # typing age or Age won&#39;t work either because there isn&#39;t an object called age or Age. From the original table, we know that there are more variables (columns) we need to add to the data frame data: the number of children the person has and the person’s gender. Let’s label the number of children each person has as Children and the gender of each person as Gender. data$Children &lt;- c(1, 3, 2) # this tells R to go to the object data and create a column called Children. Then, assign the column the values 1, 3, and 2. data$Gender &lt;- c(&quot;male&quot;, &quot;female&quot;, &quot;male&quot;) # this tells R to go to the object data and create a column called Gender. Then, assign the column the values &quot;male&quot;, &quot;female&quot;, and &quot;male&quot; # again, notice the order of data$Children and data$Gender match the order of the names Now, when you type data into the console, you’ll get: ## Name Age Children Gender ## 1 Bob 48 1 male ## 2 Andrea 47 3 female ## 3 Calvin 49 2 male Note that we created Children and Gender within the data frame data. So if you type Children and Gender without data$, you will get an error message in the console telling you that the object cannot be found because there isn’t an object (independent of the data frame) that is called Children or Gender. Now, let’s say we made a mistake and need to remove Children from the data frame, data. We can type: data$Children &lt;- NULL # this tells R to assign the value of NULL to data$Children # NULL basically represents non-existence. So, when we assign NULL to data$Children, it means we want that column to be non-existent / removed. data ## Name Age Gender ## 1 Bob 48 male ## 2 Andrea 47 female ## 3 Calvin 49 male # notice that the Children column is now gone Finally, if we want to save the data frame into a .csv file, we use write.csv(). write.csv(data, &quot;bobandreacalvin.csv&quot;) # this tells R to save the object, data, as a .csv file, and to name the .csv file as bobandreacalvin.csv. # remember to specify both the name and the extension of the file (e.g., bobandreacalvin.csv). The .csv file will now be saved as bobandreacalvin.csv within your current directory. If you used an R project, it will be saved in your project directory. If you didn’t use an R project but set the working directory, it will be in the working directory. Otherwise, it will be in the default directory. If you don’t know what the directory is, type getwd() into the console. As an aside, some students might wonder why we don’t use write.csv2 instead. write.csv2 uses a comma for the decimal point whereas write.csv uses a full stop / period for the decimal point. Since it’s more usual to use the full stop / period for the decimal point, we’ll stick to write.csv. Now that you understand the basics of R, let’s look at how to use R packages in the following section! "],["packages.html", "3 Using Packages 3.1 Installing and Loading sylcount 3.2 Using sylcount", " 3 Using Packages You can think of packages as collections of R codes (and more!) that other people have created to make R more powerful or easier to use. There are many different packages that serve different functions. Regardless which package you use, you need to both install and load the package. In this section, we will demonstrate how to install, load, and use the sylcount package, which computes Flesch Reading Ease scores to estimate the readability of the items in a scale. 3.1 Installing and Loading sylcount To install sylcount, use the function install.packages(). Make sure you are connected to the internet. The packages will be downloaded from an R server and automatically installed. It’s very common for R packages to rely on other packages to work correctly. To make sure all necessary packages are downloaded, the command below includes the specification dependencies = T. install.packages(&quot;sylcount&quot;, dependencies = TRUE) Even after we have installed sylcount, we cannot use it unless we load it. To load it, we need the library() function. library(sylcount) Note that we only need to install each package once. But we need to load the package each time we re-start RStudio. (Think of the package like a genie that goes to sleep each time you close RStudio. If you need the genie to do stuff for you the next time around, you need to awaken it again!) 3.2 Using sylcount Now, suppose we have two items in our scale: Assess your level of subjective well-being over the past fortnight. How happy have you been over the past two weeks? 3.2.1 Readability of Each Item Let’s say we want to know how readable each item is. To do that, we will first store our items as individual R objects. # Store the first item as item1 item1 &lt;- &quot; Assess your level of subjective well-being over the past fortnight.&quot; # Store the second item as item2 item2 &lt;- &quot; How happy have you been over the past two weeks?&quot; Notice that we added a space after the first quotation mark for each object. Later, we will combine all the items into a single text sample. Adding a space after the first quotation mark ensures that the number of words is computed correctly when we combine the items. Then, we will use the readability() function from the sylcount package to compute the readability of each item. # Readability for item1 readability(item1) ## chars wordchars words nonwords sents sylls polys re gl ari ## 1 68 56 11 0 1 18 1 57.23364 8.009091 9 ## smog cl ## 1 8.841846 11.44364 # Readability for item2 readability(item2) ## chars wordchars words nonwords sents sylls polys re gl ari smog cl ## 1 49 38 10 0 1 12 0 95.165 2.47 2 3.1291 3.584 The Flesch Reading Ease score is presented under the ‘re’ column. Remember that the Flesch Reading Ease score ranges from 0 (difficult to understand) to 100 (easy to understand). We want to aim for a score over 60. 3.2.2 Readability of All Items What if we want to compute the readability of all items? To do this, we first paste all the items into a single object using the paste0() function. all_items &lt;- paste0(item1, item2) Then we run the readability check. readability(all_items) ## chars wordchars words nonwords sents sylls polys re gl ari ## 1 117 94 21 0 3 30 1 78.87286 3.997143 4 ## smog cl ## 1 6.427356 6.291429 And that’s it! Congratulations! You’ve learnt how to install, load, and use a package to find out the readability of items in a scale! In the following section, we will use more packages (yay!) to find the reliability of a scale. "],["reliability.html", "4 Reliability 4.1 Dataset 4.2 Install and Load Packages 4.3 Set Working Directory and Load Dataset 4.4 Descriptives 4.5 Reverse Scoring 4.6 Correlations 4.7 Alpha Reliability", " 4 Reliability A scale typically has multiple items. Because each item in the scale is supposed to measure the same construct, instead of looking at each item separately, it is more efficient to combine participants’ responses to these multiple items into a single score. This single score is then the variable that operationalises our construct. However, because participants do not always respond to items in the way that researchers intend, we should first check that the pattern of responses is consistent with our expectations (i.e., check which items are positively / negatively related to each other). We also need to check whether the items have adequate reliability. 4.1 Dataset To demonstrate how we do those checks, we will use the following dataset: SE Data. (Download the dataset by clicking on the hyperlink.) This hypothetical dataset contains 23 participants’ responses to the Rosenberg Self-Esteem Scale. The Rosenberg Self-Esteem Scale has 10 items and is rated on a 4-point Likert scale, where 1 = Strongly agree, 2 = Agree, 3 = Disagree, 4 = Strongly disagree. The 10 items are: V33 On the whole, I am satisfied with myself. V34 At times I think I am no good at all. (reverse-keyed item) V35 I feel that I have a number of good qualities. V36 I am able to do things as well as most other people. V37 I feel I do not have much to be proud of. (reverse-keyed item) V38 I certainly feel useless at times. (reverse-keyed item) V39 I feel that I’m a person of worth. V40 I wish I could have more respect for myself. (reverse-keyed item) V41 All in all, I am inclined to think that I am a failure. (reverse-keyed item) V42 I take a positive attitude toward myself. Notice here that V34, V37, V38, V40, V41 are reverse-keyed items. 4.2 Install and Load Packages Before we start, we first need to install and load two packages: tidyverse and psych. Let’s install those packages… install.packages(&quot;psych&quot;, dependencies = T) install.packages(&quot;tidyverse&quot;, dependencies = T) … and load them. library(psych) library(tidyverse) 4.3 Set Working Directory and Load Dataset Now, we need to set the working directory and load the dataset. The reason we need to set the working directory is that we need to tell R where to find the RData file that we saved just now. To do that, in RStudio, go to Session &gt; Set Working Directory &gt; Choose Directory. Select the folder where you saved the RData file. Now that we’ve set the working directory, load the dataset using the load() function. load(&quot;SE Data.RData&quot;) To view the data, either go to the Environment tab and click on esteem or type view(esteem) into the console. There should be a total of 23 rows and 10 columns. Each row represents one participant; each column represents one item on the Rosenberg Self-Esteem Scale. The column header tells us which item each column represents. 4.4 Descriptives Now that we have the data loaded, let’s get some descriptive statistics using the describe() function from the psych package. describe(esteem) ## vars n mean sd median trimmed mad min max range skew kurtosis se ## V33 1 23 2.91 0.60 3 2.89 0.00 2 4 2 0.01 -0.37 0.12 ## V34 2 23 2.70 0.70 3 2.68 0.00 1 4 3 -0.30 -0.18 0.15 ## V35 3 23 3.13 0.46 3 3.11 0.00 2 4 2 0.52 0.89 0.10 ## V36 4 23 3.26 0.54 3 3.26 0.00 2 4 2 0.15 -0.62 0.11 ## V37 5 23 2.35 0.71 2 2.37 0.00 1 4 3 0.16 -0.38 0.15 ## V38 6 23 2.70 0.70 3 2.68 0.00 1 4 3 -0.30 -0.18 0.15 ## V39 7 23 3.26 0.54 3 3.26 0.00 2 4 2 0.15 -0.62 0.11 ## V40 8 23 2.48 0.73 2 2.37 0.00 2 4 2 1.08 -0.37 0.15 ## V41 9 23 1.96 0.82 2 1.89 1.48 1 4 3 0.54 -0.36 0.17 ## V42 10 23 3.00 0.52 3 3.00 0.00 2 4 2 0.00 0.51 0.11 This gives us the mean, SD, and other descriptive statistics for each item. The minimum and maximum are particularly useful here because it allows us to check if there are any erroneous data (e.g., values of 10). 4.5 Reverse Scoring As mentioned earlier, V34, V37, V38, V40, V41 are reverse-keyed items. This means that we need to reverse score them (i.e., convert values of 1 to 4, 2 to 3, 3 to 2, and 4 to 1). To do that, we will use the following formula: (max possible value on likert scale + min possible value on likert scale) - observation. (For the esteem items, the max possible value is 4 and the min possible value is 1.) We will apply that formula across the 5 columns containing the reverse-keyed items. esteem %&gt;% mutate(4 + 1 - across(c(V34, V37, V38, V40, V41), .names = &quot;{col}_r&quot;)) %&gt;% view(., &quot;check&quot;) The above code is saying this: Go to the data frame esteem and then mutate (create new columns) by taking 4 + 1 - each of this set of columns (V34, V37, V38, V40, V41). Give the new columns names (.names) by taking the name of the original columns ({col}) and adding _r. Then, view the result of the reverse scoring (and call that window “check”). Check that the reverse-keyed items have been reverse-scored properly (e.g., values of 1 on the original item are now 4 after reverse scoring and vice versa.) If all is good, then proceed to save the changes by overwriting esteem (using esteem &lt;-) and removing view(., \"check\"). esteem &lt;- esteem %&gt;% mutate(4 + 1 - across(c(V34, V37, V38, V40, V41), .names = &quot;{col}_r&quot;)) 4.6 Correlations After completing the reverse scoring, we can check the correlations to make sure that the items are generally positively correlated with each other. This is an optional second check to ensure that we have recoded the reverse-keyed items properly. esteem %&gt;% select(V33, V35, V36, V39, V42, V34_r, V37_r, V38_r, V40_r, V41_r) %&gt;% corr.test(.) ## Call:corr.test(x = .) ## Correlation matrix ## V33 V35 V36 V39 V42 V34_r V37_r V38_r V40_r V41_r ## V33 1.00 0.21 0.36 0.36 0.29 0.17 0.25 -0.04 0.32 0.38 ## V35 0.21 1.00 0.22 0.59 0.00 0.01 0.15 0.01 0.20 0.23 ## V36 0.36 0.22 1.00 0.53 0.16 0.02 0.01 -0.10 0.22 0.48 ## V39 0.36 0.59 0.53 1.00 0.32 0.26 0.13 0.02 0.45 0.38 ## V42 0.29 0.00 0.16 0.32 1.00 0.37 0.12 0.37 0.48 0.53 ## V34_r 0.17 0.01 0.02 0.26 0.37 1.00 0.13 0.54 0.38 0.37 ## V37_r 0.25 0.15 0.01 0.13 0.12 0.13 1.00 -0.05 0.02 0.18 ## V38_r -0.04 0.01 -0.10 0.02 0.37 0.54 -0.05 1.00 0.30 0.05 ## V40_r 0.32 0.20 0.22 0.45 0.48 0.38 0.02 0.30 1.00 0.49 ## V41_r 0.38 0.23 0.48 0.38 0.53 0.37 0.18 0.05 0.49 1.00 ## Sample Size ## [1] 23 ## Probability values (Entries above the diagonal are adjusted for multiple tests.) ## V33 V35 V36 V39 V42 V34_r V37_r V38_r V40_r V41_r ## V33 0.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 ## V35 0.34 0.00 1.00 0.13 1.00 1.00 1.00 1.00 1.00 1.00 ## V36 0.10 0.31 0.00 0.37 1.00 1.00 1.00 1.00 1.00 0.78 ## V39 0.10 0.00 0.01 0.00 1.00 1.00 1.00 1.00 1.00 1.00 ## V42 0.18 1.00 0.46 0.13 0.00 1.00 1.00 1.00 0.84 0.40 ## V34_r 0.43 0.96 0.92 0.23 0.08 0.00 1.00 0.34 1.00 1.00 ## V37_r 0.26 0.51 0.96 0.56 0.58 0.55 0.00 1.00 1.00 1.00 ## V38_r 0.85 0.96 0.65 0.92 0.08 0.01 0.82 0.00 1.00 1.00 ## V40_r 0.14 0.37 0.32 0.03 0.02 0.07 0.95 0.17 0.00 0.73 ## V41_r 0.08 0.30 0.02 0.07 0.01 0.08 0.41 0.80 0.02 0.00 ## ## To see confidence intervals of the correlations, print with the short=FALSE option The code above is saying: Go to the data frame esteem and then select (choose) this set of columns (V33, V35, V36, V39, V42, V34_r, V37_r, V38_r, V40_r, V41_r). Then perform the correlation test (corr.test) on the columns. Notice that we included only the recoded reverse-keyed items and not the uncoded reverse-keyed items. 4.7 Alpha Reliability Now we can check the reliability of the full scale using Cronbach’s alpha. Cronbach’s alpha should only be computed among items that are generally positively correlated. So like for correlation, we included only the recoded reverse-keyed items and not the uncoded reverse-keyed items. esteem %&gt;% select(V33, V35, V36, V39, V42, V34_r, V37_r, V38_r, V40_r, V41_r) %&gt;% psych::alpha(.) ## ## Reliability analysis ## Call: psych::alpha(x = .) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.75 0.76 0.84 0.24 3.2 0.074 2.8 0.36 0.23 ## ## 95% confidence boundaries ## lower alpha upper ## Feldt 0.57 0.75 0.88 ## Duhachek 0.61 0.75 0.90 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r med.r ## V33 0.73 0.74 0.82 0.24 2.8 0.081 0.039 0.22 ## V35 0.75 0.76 0.81 0.26 3.1 0.077 0.034 0.29 ## V36 0.74 0.75 0.80 0.25 3.0 0.079 0.032 0.25 ## V39 0.72 0.71 0.76 0.22 2.5 0.086 0.032 0.21 ## V42 0.72 0.73 0.80 0.23 2.7 0.086 0.035 0.22 ## V34_r 0.73 0.74 0.80 0.24 2.8 0.083 0.035 0.22 ## V37_r 0.77 0.77 0.85 0.28 3.4 0.069 0.035 0.31 ## V38_r 0.76 0.77 0.81 0.27 3.3 0.071 0.027 0.25 ## V40_r 0.71 0.72 0.81 0.22 2.6 0.089 0.036 0.22 ## V41_r 0.70 0.71 0.78 0.22 2.5 0.093 0.034 0.21 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## V33 23 0.57 0.58 0.50 0.44 2.9 0.60 ## V35 23 0.41 0.46 0.41 0.30 3.1 0.46 ## V36 23 0.48 0.52 0.47 0.36 3.3 0.54 ## V39 23 0.67 0.72 0.72 0.57 3.3 0.54 ## V42 23 0.65 0.65 0.62 0.56 3.0 0.52 ## V34_r 23 0.62 0.58 0.54 0.47 2.3 0.70 ## V37_r 23 0.36 0.34 0.21 0.17 2.7 0.71 ## V38_r 23 0.40 0.37 0.31 0.22 2.3 0.70 ## V40_r 23 0.70 0.68 0.64 0.57 2.5 0.73 ## V41_r 23 0.75 0.73 0.72 0.61 3.0 0.82 ## ## Non missing response frequency for each item ## 1 2 3 4 miss ## V33 0.00 0.22 0.65 0.13 0 ## V35 0.00 0.04 0.78 0.17 0 ## V36 0.00 0.04 0.65 0.30 0 ## V39 0.00 0.04 0.65 0.30 0 ## V42 0.00 0.13 0.74 0.13 0 ## V34_r 0.09 0.57 0.30 0.04 0 ## V37_r 0.04 0.35 0.52 0.09 0 ## V38_r 0.09 0.57 0.30 0.04 0 ## V40_r 0.13 0.22 0.65 0.00 0 ## V41_r 0.04 0.17 0.48 0.30 0 The code above is saying: Go to the data frame esteem and then select (choose) this set of columns (V33, V35, V36, V39, V42, V34_r, V37_r, V38_r, V40_r, V41_r). Then calculate the alpha using the alpha function from the psych package (psych::alpha(.)). The reason we use psych::alpha() instead of just alpha() is that the tidyverse package also has an alpha() function. We need to specify which package’s function we want. The Cronbach’s alpha generally ranges from 0 (completely unreliable) to 1 (perfectly reliable), with higher values indicating better scale reliability. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
